<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: learning | BaQiao]]></title>
  <link href="http://xdbaqiao.github.io/blog/categories/learning/atom.xml" rel="self"/>
  <link href="http://xdbaqiao.github.io/"/>
  <updated>2014-07-06T20:19:55+08:00</updated>
  <id>http://xdbaqiao.github.io/</id>
  <author>
    <name><![CDATA[BaQiao]]></name>
    <email><![CDATA[yexj061761@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[常见的IT类面试题]]></title>
    <link href="http://xdbaqiao.github.io/blog/2014/07/06/interview/"/>
    <updated>2014-07-06T18:06:00+08:00</updated>
    <id>http://xdbaqiao.github.io/blog/2014/07/06/interview</id>
    <content type="html"><![CDATA[<pre><code>1\. 讲述计算机启动过程？            
2\. 什么是MBR，有多大？               
3\. Linux 第一个进程叫什么名字？              
4\. http协议状态码，4XX有什么？              
5\. raid2,3,4用途？              
6\. traceroute的基本原理是什么？              
7\. 翻转字符串              
8\. 字符串转数字              
9\. crontab 同步时间              
10\. mysql nginx apache 的配置文件位置              
11\. C++中的容器              
12\. 解释$0 $$ $# $! $@ $? $*              
13\. python 生成器和修饰器              
14\. iptables              
15\. Django工作原理              
16\. vim 替换1-10行字符
17\. ls -al
18\. mysql, nginx, apache 优化              
19\. 网站加速              
20\. uwsgi 应用服务器              
21\. ip route add default，网络配置相关              
22\. 关于linux的runlevel              
</code></pre>

<p><strong>我的解答</strong></p>

<p>1. 讲述计算机启动过程？</p>

<blockquote><p>计算机从BIOS中启动，BIOS一般位于主板的flash中，计算机上电之后，进入BIOS，进行硬件自检，并决定从哪里（可选u盘，硬盘等）启动计算机操作系统，接着BIOS把控制权交给设备，从设备中的前512字节中，读取MBR，即主引导记录，放入内存，里面保存有硬盘分区表等信息。接着进入启动管理器，常见的有grub，lilo等，交由用户决定启动哪个操作系统。</p></blockquote>

<p>2. 什么是MBR，有多大？</p>

<blockquote><p>Master Boot Record，MBR主引导记录，有512字节，前446个字节是主引导程序，将系统控制转交给用户制定的分区表中的系统;然后是四个分区表，用于记录磁盘分区状况，每个分区表16个字节;最后是结束标志AA55</p></blockquote>

<p>3. Linux 第一个进程叫什么名字？</p>

<blockquote><p>init(1)，是进程号为1的进程，用于开机初始化</p></blockquote>

<p>4. http协议状态码，4XX有什么？</p>

<blockquote><p>400：请求报文错误    401：未认证    403：Forbidden      <br/>
404：not found等</p></blockquote>

<p>5. raid2,3,4用途？</p>

<blockquote><p>raid2 现在用的很少，因为他对大数据有很高读写性能，但少量读写性能不好。它是为超级计算机开发的磁盘阵列，带海明码，在2的n次幂磁盘中设立校验盘。基本思想是在IO到来之后，控制器将数据按位分割，并顺序将每一位数据放置在每一个磁盘中，这样任何数据都能并行读取，提高性能。但这样也不能实现并发IO，因为硬盘被占用。           <br/>
raid3现在用的也很少，因为其校验盘很容易成为性能瓶颈，其将数据分成多“块”，放在N+1个磁盘上，N个磁盘存放数据，1个磁盘存放校验数据   <br/>
raid4也用的很少，其校验也是放置在一个磁盘上，这个磁盘很容易成为性能瓶颈。  <br/>
所以raid2,3,4基本很少见，其主要运用场景是大量数据读写，比如视频，影音等。</p></blockquote>

<p>6. traceroute的基本原理是什么？</p>

<blockquote><p>traceroute主要用于追踪数据包的路由路径，采用icmp协议，数据包经过一个路由器，TTL生存时间将会减一，直到数据包到达目的地或者TTL被置为零。</p></blockquote>

<p>7. 翻转字符串            <br/>
8. 字符串转数字            <br/>
9. crontab 同步时间</p>

<blockquote><p>10 10-16/2 * 7 *  /usr/bin/ntpd -s 133.100.9.2       <br/>
7月十点十分到下午四点十分，每隔两个小时，进行时间同步       <br/>
有面试官问，crontab同步失败，是什么原因，很有可能是环境变量设置有误，找不到相关命令</p></blockquote>

<p>10. mysql nginx apache 的配置文件位置</p>

<blockquote><p>我完全没有料到居然这也能考，不过我确实没有在意，因为平时凭肌肉记忆和自动补全就能找到相关文件，但笔试起来，我却是如此水。。。。       <br/>
自动补全是如此关键，另外我觉得这真没什么可考的。。。      <br/>
以archlinux为例，我在自动补全的帮助下，轻轻松松找到。。。         <br/>
/etc/mysql/my.cnf   /etc/nginx/nginx.conf    /etc/apache2/httpd.conf</p></blockquote>

<p>11. C++中的容器</p>

<blockquote><p>包括顺序容器和关联容器，顺序容器有vector,list,queue,deque,stack等，其属性和操作包括，size,pop,push,top,insert,erase等，关联容器有map，set等，其属性和操作包括insert,find,count,erase等。</p></blockquote>

<p>12. $0 $$ $# $! $@ $? $*</p>

<blockquote><p>$0 程序名     <br/>
$$ 当前进程进程号     <br/>
$# 参数个数           <br/>
$! 后台运行最后一个进行进程号           <br/>
$@ 输入参数组合，形如("$1", "$2", "$3")        <br/>
$? 前一命令返回码                 <br/>
$* 输入参数组合，形如("$1 $2 $3")</p></blockquote>

<p>13. python 生成器和修饰器</p>

<blockquote><p>python的生成器就是yield，表示带yield的函数，其实很简单，类似一个list，不同的是，生成器在使用之后会消耗</p></blockquote>

<p>14. iptables</p>

<blockquote><p>iptables有三表五链，分别是nat、filter、mangle表，prerouting、postrouting、output、input、forward链      <br/>
nat表用于DNAT与SNAT，包含两个链，prerouting、postrouting       <br/>
filter表是默认表，包含input、output、forward链      <br/>
mangle表包含postrouting、prerouting和forward链       <br/>
可以分三种情况理解防火墙。第一种是进入的数据，先通过prerouting链，进行地址变换，然后进行路由判断，如果目的地址是本机，则通过input链处理;如果目的地不是本机，则是第二种情况，转发的数据，则先通过forward链处理，判断是否拦截或转发，然后交给postrouting链进行处理;第三种情况是出站的数据，首先通过output链，然后进行路由判断，最后通过postrouting，进行SNAT。</p></blockquote>

<p>15. Django工作原理</p>

<blockquote></blockquote>

<p>16. vim 替换1-10行字符</p>

<blockquote><p>:1,10s/www/wwww/g</p></blockquote>

<p>17. ls -al</p>

<blockquote><p>命令第二列表示，子文件夹数量或者文件硬链接数量</p></blockquote>

<p>18. mysql, nginx, apache 优化            <br/>
19. 网站加速            <br/>
20. uwsgi 应用服务器            <br/>
21. ip route add default，网络配置相关            <br/>
22. 关于linux的runlevel</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[梁漱溟：做学问]]></title>
    <link href="http://xdbaqiao.github.io/blog/2013/11/19/zuoxuewen/"/>
    <updated>2013-11-19T22:46:00+08:00</updated>
    <id>http://xdbaqiao.github.io/blog/2013/11/19/zuoxuewen</id>
    <content type="html"><![CDATA[<p><strong>节选自<a href="http://www.ruanyifeng.com/blog/2013/09/liang_shuming.html">阮一峰的网络日志</a></strong></p>

<p>所谓学问，就是对问题说得出道理，有自己的想法。     <br/>
想法似乎人人都是有的，但又等于没有。因为大多数人的头脑杂乱无章，人云亦云，对于不同的观点意见，他都点头称是，等于没有想法。     <br/>
我从来没有想过要做学问，走上现在这条路，只是因为我喜欢提问题。大约从十四岁开始，总有问题占据在我的心里，从一个问题转入另一个问题，一直想如何解答，解答不完就欲罢不能，就一路走了下来。     <br/>
提得出问题，然后想要解决它，这大概是做学问的起点吧。      <br/>
以下分八层来说明我走的一条路：</p>

<h2>第一层境界：形成主见</h2>

<p>用心想一个问题，便会对这个问题有主见，形成自己的判断。        <br/>
说是主见，称之为偏见亦可。我们的主见也许是很浅薄的，但即使浅薄，也终究是你自己的意见。       <br/>
许多哲学家的哲学也很浅，就因为浅便行了，胡适之先生的哲学很浅，亦很行。因为这是他自己的，纵然不高深，却是心得，而亲切有味。所以说出来便能够动人，能动人就行了！他就能自成一派，其他人不行，就是因为其他人连浅薄的哲学都没有。</p>

<h2>第二层境界：发现不能解释的事情</h2>

<p>有主见，才有你自己；有自己，才有旁人，才会发觉前后左右都是与我意见不同的人。     <br/>
这时候，你感觉到种种冲突，种种矛盾，种种没有道理，又种种都是道理。于是就不得不第二步地用心思。       <br/>
面对各种问题，你自己说不出道理，不甘心随便跟着人家说，也不敢轻易自信，这时你就走上求学问的正确道路了。</p>

<h2>第三层境界：融汇贯通</h2>

<p>从此以后，前人的主张、今人的言论，你不会轻易放过，稍有与自己不同处，便知道加以注意。        <br/>
你看到与自己想法相同的，感到亲切；看到与自己想法不同的，感到隔膜。有不同，就非求解决不可；有隔膜，就非求了解不可。于是，古人今人所曾用过的心思，慢慢融汇到你自己。          <br/>
你最初的一点主见，成为以后大学问的萌芽。从这点萌芽，你才可以吸收养料，才可以向上生枝发叶，向下入土生根。待得上边枝叶扶疏，下边根深蒂固，学问便成了。     <br/>
这是读书唯一正确的方法，不然读书也没用处。会读书的人说话时，说他自己的话，不堆砌名词，不旁征博引；反之，引书越多的人越不会读书。</p>

<h2>第四层境界：知不足</h2>

<p>用心之后，就知道要虚心了。自己当初一点见解之浮浅，不足以解决问题。      <br/>
学问的进步，不单是见解有进步，还表现在你的心思头脑锻炼得精密了，心气态度锻炼得谦虚了。      <br/>
心虚思密是求学的必要条件。          <br/>
对于前人之学，总不要说自己都懂。因为自己觉得不懂，就可以除去一切浮见，完全虚心地先求了解它。       <br/>
遇到不同的意见思想，我总疑心他比我高明，疑心他必有我所未及的见闻，不然，他何以不和我作同样判断呢？疑心他必有精思深悟过于我，不然，何以我所见如此而他所见如彼呢？</p>

<h2>第五层境界：以简御繁</h2>

<p>你见到的意见越多，专研得愈深，这时候零碎的知识，片段的见解都没有了；心里全是一贯的系统，整个的组织。如此，就可以算成功了。到了这时候，才能以简御繁，才可以学问多而不觉得多。      <br/>
凡有系统的思想，在心里都很简单，仿佛只有一两句话。凡是大哲学家皆没有许多话说，总不过一两句。很复杂很沉重的宇宙，在他手心里是异常轻松的----所谓举重若轻。      <br/>
学问家如说肩背上负着多沉重的学问，那是不对的；如说当初觉得有什么，现在才晓得原来没有什么，那就对了。道理越看得明透，越觉得无甚话可说，还是一点不说的好。心里明白，口里讲不出来。       <br/>
反过来说，学问浅的人说话愈多，思想不清楚的人名词越多。让一个没有学问的人看见，真要把他吓坏了！其实道理明透了，名词便可用，可不用，或随意拾用。</p>

<h2>第六层境界：运用自如</h2>

<p>如果外面或里面还有解决不了的问题，那学问必是没到家。如果学问已经通了，就没有问题。       <br/>
真学问的人，学问可以完全归自己运用。假学问的人，学问在他的手里完全不会用。</p>

<h2>第七层境界：一览众山小</h2>

<p>学问里面的甘苦都尝过了，再看旁人的见解主张，其中得失长短都能够看出来。这个浅薄，那个到家，这个是什么分数，那个是什么程度，都知道得很清楚；因为自己从前也是这样，一切深浅精粗的层次都曾经过。</p>

<h2>第八层境界：通透</h2>

<p>思精理熟之后，心里就没有一点不透的了。</p>
]]></content>
  </entry>
  
</feed>
