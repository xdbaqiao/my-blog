<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | BaQiao]]></title>
  <link href="http://xdbaqiao.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://xdbaqiao.github.io/"/>
  <updated>2014-07-06T20:19:55+08:00</updated>
  <id>http://xdbaqiao.github.io/</id>
  <author>
    <name><![CDATA[BaQiao]]></name>
    <email><![CDATA[yexj061761@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[我的django博客]]></title>
    <link href="http://xdbaqiao.github.io/blog/2014/06/08/my-django-blog/"/>
    <updated>2014-06-08T23:06:00+08:00</updated>
    <id>http://xdbaqiao.github.io/blog/2014/06/08/my-django-blog</id>
    <content type="html"><![CDATA[<p>用了两年Python，写了两年Python爬虫，水平一直停留在脚本层级。最近受工作的刺激，梳理了一下思绪，发现自己前端后端都有很大的发展潜力。所以先拿Django开刀，练练手。</p>

<p>Linux和Python已经很熟悉了，所以代码写起来也很顺手。下面记录一下本博客的搭建过程。</p>

<p>原来的博客是Octopress，基本上是嗟来之食，拿来就用，底层原理完全没有理会。现在用Django，感觉自然不一样，当然也学习到很多。</p>

<p>我直接在自己的vps上操作，发行版是Debian。        <br/>
首先，安装Django</p>

<blockquote><p>pip install django</p></blockquote>

<p>安装完成验证一下</p>

<blockquote><p>python –c “import djang</p></blockquote>

<p>如果没有输出，则表示安装成功了。     <br/>
运行</p>

<blockquote><p>django-admin.py startproject myblog</p></blockquote>

<p>创建自己的第一个工程，发现在当前目录下，多了文件夹myblog，其中有manage.py，内置众多管理命令。而myblog/myblog 文件夹内也有urls.py, settings.py等关键文件。</p>

<p>执行</p>

<blockquote><p>python manage.py runserver 127.0.0.1:8080</p></blockquote>

<p>就可以在本机浏览器访问了。当然也可以修改ip地址和端口，使远程访问，我就是这样的，因为我直接在vps上操作的。</p>

<p>创建一个博客应用</p>

<blockquote><p>python manage.py startapp sblog</p></blockquote>

<p>会在myblog同级目录下新建sblog目录，里面有models.py, test.py, admin.py, views.py等重要文件。</p>

<p>Django被称为MTV架构，我的理解是，他还是MVC架构，控制器就是整个Django框架，V就是view视图，M就是model进行事物处理，Django多了一个templat模板，模板用于前端展示。</p>

<p><code>M：models.py 进行数据库操作</code>         <br/>
<code>T：template 用于前端展示</code>        <br/>
<code>V：views  用于视图逻辑处理</code></p>

<p>另外urls.py用于解析url超链接，进行视图逻辑分发。</p>

<p>首先我打开了admin，安装完Django之后，默认开启了settings.py 中的全部INSTALLED_APP应用（其中添加sblog应用）以及中间件MIDDLEWARE_CLASSES，其他我都没有修改，数据库使用默认的sqllite3</p>

<p>执行</p>

<blockquote><p>python manage.py syncdb</p></blockquote>

<p>进行数据库同步，创建用户。这样就可以通过127.0.0.1:8080/admin访问管理工具了。</p>

<p>为了使管理工具能管理博客，需要编辑models.py 文件，</p>

<p>```
from django.db import models
from django.contrib import admin</p>

<p>class BQBlog(models.Model):</p>

<pre><code>title = models.CharField(max_length=200) 
content = models.TextField() 
</code></pre>

<p>timestamp = models.DateTimeField()
class BQBlogAdmin(admin.ModelAdmin)：
list_display = ('title','timestamp')</p>

<p>admin.site.register(BQBlog, BQBlogAdmin) //运行python manage.py syncdb前需注释
```</p>

<p>使保存在数据库中的博客有标题，内容和时间戳              <br/>
这样就可以在Django管理工具中进行博客管理了。</p>

<p>进入sblog目录，新建文件夹templates进行模板管理</p>

<p>新建文件chapter.html</p>

<pre><code>
</code></pre>

<p>在views.py 中添加视图逻辑</p>

<p>```
from django.shortcuts import render_to_response
from sblog.models import BQBlog</p>

<p>def chapter(request):</p>

<pre><code>posts = BQBlog.objects.all() 
return render_to_response("chapter.html", {'posts':posts}) 
</code></pre>

<p>```</p>

<p>myblog文件夹urls.py 中添加url(r'<sup>$',</sup> include('blog.urls')),              <br/>
sblog文件夹新建urls.py</p>

<p>```
from django.conf.urls import *
from sblog.views import chapter</p>

<p>urlpatterns = patterns('', url(r'<sup>$',</sup> chapter), ) <br/>
```</p>

<p>这样一个基本的、最简单的Django博客就出来了！</p>

<p>最后需要对其进行简单润色。              <br/>
见<a href="http://django-baqiao.tk/"><code>博客http://django-baqiao.tk</code></a></p>

<p>太丑了！以后有时间再修改！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python爬虫程序(多线程，get，post，代理，日志)]]></title>
    <link href="http://xdbaqiao.github.io/blog/2013/09/01/python-scrape/"/>
    <updated>2013-09-01T15:58:00+08:00</updated>
    <id>http://xdbaqiao.github.io/blog/2013/09/01/python-scrape</id>
    <content type="html"><![CDATA[<p>```python</p>

<h1>!/usr/bin/env python2</h1>

<h1>coding: utf-8</h1>

<p>import re
import string
import urllib
import urllib2
import logging
import cookielib
import threading
from collections import deque</p>

<p>def set_log():</p>

<pre><code>FMT = '%(asctime)s-%(levelname)s\t%(message)s'
logging.basicConfig(format=FMT, level=logging.INFO, filename='downloading.log', filemode='a')
</code></pre>

<p>class download:</p>

<pre><code>def __init__(self, first_url, proxy=None):
    self.user_agent = 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:5.0) Gecko/20100101 Firefox/5.0'
    self.headers = {'User-Agent': self.user_agent, 'Accept-encoding':'gzip, deflate', 'Referer': first_url}
    self.opener = urllib2.build_opener()
    self.proxy = proxy

def add_proxy(self, url, proxy):
    if proxy:
        if url.startswith('https'):
            self.opener.add_handler(urllib2.ProxyHandler({'https': proxy}))
        else:
            self.opener.add_handler(urllib2.ProxyHandler({'http': proxy}))

def get(self, url):
    self.add_proxy(url, self.proxy)
    request = urllib2.Request(url)
    response = self.opener.open(request)
    html = response.read()
    return html

def post(self, url, data):
    self.add_proxy(url, self.proxy)
    if isinstance(data, dict):
        data = urllib.urlencode(data)
    request = urllib2.Request(url, data, self.headers)
    response = self.opener.open(request)
    html = response.read()
    return html
</code></pre>

<p>def fetch():</p>

<pre><code>url = 'http://medboard.nv.gov/verification/'
surl = 'http://medboard.nv.gov/verification/Search.aspx'

name = deque()
for i in string.lowercase:
    name.append(i)

def worker():
    D = download(url)
    D.opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cookielib.MozillaCookieJar()))
    while True:
        try:
            letter = name.popleft()
        except IndexError:
            break
        html = D.get(url=url)

        post_data = {}
        m = re.compile(r'__VIEWSTATE"\svalue="([^"]+)', re.DOTALL|re.IGNORECASE).search(html)
        post_data['__VIEWSTATE'] = m.groups()[0] if m else ''
        m = re.compile(r'__EVENTVALIDATION"\svalue="([^"]+)', re.DOTALL|re.IGNORECASE).search(html)
        post_data['__EVENTVALIDATION'] = m.groups()[0] if m else ''
        post_data['t_web_lookup__license_type_name'] = 'Medical Doctor'
        post_data['t_web_lookup__first_name'] = letter
        post_data['sch_button'] = 'Search'
        html = D.post(url=surl, data=post_data)
        logging.info(html)

muilt_thread(worker, 30)
</code></pre>

<p>def muilt_thread(target, num_threads, wait=True):</p>

<pre><code>threads = [threading.Thread(target=target) for i in range(num_threads)]
for thread in threads:
    thread.start()
if wait:
    for thread in threads:
        thread.join()
</code></pre>

<p>if <strong>name</strong> == '<strong>main</strong>':</p>

<pre><code>set_log()
fetch()
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python与gnuplot]]></title>
    <link href="http://xdbaqiao.github.io/blog/2013/08/15/webserver/"/>
    <updated>2013-08-15T15:53:00+08:00</updated>
    <id>http://xdbaqiao.github.io/blog/2013/08/15/webserver</id>
    <content type="html"><![CDATA[<p>写了一个测试web服务器性能的简单脚本，运用了apache中的测试工具ab，代码如下：        <br/>
额，这不是什么机密吧，只是一个框架，以后可以加cache机制，加config或者argv，领导不要抓我。
```python</p>

<h1>!/usr/bin/python</h1>

<h1>coding:utf-8</h1>

<p>import re
import commands
import Gnuplot</p>

<p>class nginxTest:</p>

<pre><code>def __init__(self, num):
    self.request_finish_time = []
    self.command = 'ab -n %s -c 10 -k http://localhost/' # 把localhost 换成www.google.com，让暴风雨来的猛烈些吧
    self.num = num

def start(self):
    for i_num, i in enumerate(self.num): 
        self.getOutput(i)
        self.parseOutput()
        print 'Total %s, finish %s.' % (str(len(self.num)), str(i_num+1))

def getOutput(self, num):
    (status, self.output) = commands.getstatusoutput(self.command % num)

def parseOutput(self):
    m = re.compile('Time taken for tests:\s+([\.\d]+)').search(self.output)
    if m:
        rft = m.groups()[0]
        self.request_finish_time.append(rft)
</code></pre>

<p>class gnuplot:</p>

<pre><code>def __init__(self, x, y, title):
    self.x = x
    self.y = y
    self.title = title
    self.plot()

def plot(self):
    self.g = Gnuplot.Gnuplot(debug=1)
    d = Gnuplot.Data(self.x, self.y, with_='lines')
    self.g.title(self.title)
    self.g.xlabel('times')
    self.g.ylabel('%s' % self.title)
    self.g.plot(d)
    self.g.hardcopy('./%s.ps' % self.title, enhanced=1, color=1)
</code></pre>

<p>if <strong>name</strong> == '<strong>main</strong>':</p>

<pre><code>times = [i for i in range(10, 45)]
n = nginxTest(num=times)
n.start()
gnuplot(x=times, y=n.request_finish_time, title='request finish time')
</code></pre>

<p>```</p>

<p><strong>The result is following</strong></p>

<p><img src="http://imgur.com/okeEBq1.png" alt="request_finish_time" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python2 的编码问题]]></title>
    <link href="http://xdbaqiao.github.io/blog/2013/08/09/coding-problem/"/>
    <updated>2013-08-09T20:36:00+08:00</updated>
    <id>http://xdbaqiao.github.io/blog/2013/08/09/coding-problem</id>
    <content type="html"><![CDATA[<p>编码涉及到很多问题，本文简单讲一讲</p>

<p>写python脚本的时候，头两行的常见格式是：</p>

<pre><code>#!/usr/bin/env python2                  
#coding:utf-8               
</code></pre>

<p>第一行的意义是在Linux下，当脚本是可执行文件是，以"./*.py"执行程序时需要调用的命令，如果以命令'python  *.py'执行程序，则第一行是没有意义的              <br/>
第二行涉及到python编码问题，它指定脚本内容的编码方式。这一行的写法很灵活，但必须包含三项内容，即"#", "coding" 和编码   <br/>
所以，也可以写作<code># -*- coding: UTF-8 -*-</code></p>

<p><strong>基本知识</strong>               <br/>
在讲python编码之前，需要了解一些基本知识：         <br/>
1. python有两种字符串类型，str和unicode，例如</p>

<pre><code>&gt;&gt;&gt; a = u'你好'          
&gt;&gt;&gt; a.__class__             
&lt;type 'unicode'&gt;           
&gt;&gt;&gt; a = '你好'           
&gt;&gt;&gt; a.__class__      
&lt;type 'str'&gt;          
</code></pre>

<p>2. python里       <br/>
encode是指将unicode 转换成  其他编码</p>

<pre><code>encode： unicode  --&gt;  other            
</code></pre>

<p>decode 是将其他编码  转换成 unicode</p>

<pre><code>decode ： other   --&gt;  unicode               
</code></pre>

<p>3. 注意区分字符集和字符编码。</p>

<pre><code>字符集是一个系统支持的所有抽象字符的集合，包括各种文字和符号。         
字符编码是一套法则，使用该法则，将一个字符集与另一个集合配对。       
字符集包括ASCII字符集，GB2312字符集，BIG5字符集，UNICODE字符集等        
</code></pre>

<p>4. UNICODE是字符集，UTF-8,UTF-16,UTF-32是三种字符编码方案。</p>

<p><strong>python的编码问题</strong></p>

<p>python在安装的时候，默认的编码是ASCII码(python3 的默认编码是UTF8)，当程序中出现非ASCII码时，程序会报错.          <br/>
在终端里，运行</p>

<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.getdefaultencoding()
'ascii'
</code></pre>

<p>可以看到，默认编码是ASCII码，看看"你好"是怎么编码的</p>

<pre><code>&gt;&gt;&gt; a = '你好'
&gt;&gt;&gt; a
'\xe4\xbd\xa0\xe5\xa5\xbd'
</code></pre>

<p>这是"你好"的<strong>utf-8</strong>编码，如果对a解码呢，解码就是转换成unicode</p>

<pre><code>&gt;&gt;&gt; a.decode('utf8')
u'\u4f60\u597d'
&gt;&gt;&gt; a = u'你好'
&gt;&gt;&gt; a
u'\u4f60\u597d'
</code></pre>

<p>可以看到，a被解码成unicode了，那对a编码呢，编码的定义是将unicode转换成其他编码，看看python会怎么处理</p>

<pre><code>&gt;&gt;&gt; a = '你好'
&gt;&gt;&gt; a.encode('utf8')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeDecodeError: 'ascii' codec can't decode byte 0xe4 in position 0: ordinal not in range(128)
</code></pre>

<p><strong>报错了</strong>！为什么会报错呢？这是因为对a进行encode操作，实际的代码是</p>

<pre><code>unicode(a).encode('utf-8')
</code></pre>

<p>会先将a解码成unicode，但没有指定解码方式，会使用系统默认的ASCII码，进行解码，<strong>解码</strong>出错。         <br/>
而对unicode类型的字符串进行解码也是一样的道理，会先将unicode编码成ASCII码，<strong>编码</strong>出错。</p>

<pre><code>&gt;&gt;&gt; a = u'你好'
&gt;&gt;&gt; a.decode('utf8')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python2.7/encodings/utf_8.py", line 16, in decode
    return codecs.utf_8_decode(input, errors, True)
UnicodeEncodeError: 'ascii' codec can't encode characters in position 0-1: ordinal not in range(128)
</code></pre>

<p>所以，<strong>最好对unicode对象只做encode操作，对str对象只做decode操作</strong>            <br/>
前面都没有用print函数打印，这时因为print会对编码进行自动处理</p>

<pre><code>&gt;&gt;&gt; a = '你好'
&gt;&gt;&gt; print a.decode('utf8')
你好
</code></pre>

<p>因为print函数对编码做了自动处理，所以显示汉字，这个操作系统环境变量设置有关。</p>

<pre><code>&gt;&gt;&gt; a.decode('utf-8').encode('utf-8')
'\xe4\xbd\xa0\xe5\xa5\xbd'
&gt;&gt;&gt; print a.decode('utf8').encode('utf-8')
你好
</code></pre>

<p>系统默认编码是ASCII码，那怎么修改系统默认编码呢：</p>

<pre><code>&gt;&gt;&gt; import sys
&gt;&gt;&gt; reload(sys)
&gt;&gt;&gt; sys.setdefaultencoding('utf-8')
</code></pre>

<p>这样系统默认编码就是utf-8了。</p>

<pre><code>&gt;&gt;&gt; sys.getdefaultencoding()
'utf-8'
</code></pre>

<p>而在脚本文件里，如果没有<code>#coding:utf-8</code>，会发生什么情况呢？          <br/>
```python</p>

<h1>!/usr/bin/env python2</h1>

<p>if <strong>name</strong> == '<strong>main</strong>':</p>

<pre><code>print '你好'
</code></pre>

<p><code>``
运行程序，会报错：               
</code>SyntaxError: Non-ASCII character '\xe4' in file 1.py on line 4, but no encoding declared;`              <br/>
第四行不是ASCII码，出错，由打印的错误信息也可以看出系统默认编码是ASCII码</p>

<p>如果加上<code>#coding:utf-8</code>，则会默认将非ASCII码，编码成utf-8</p>

<p>OK，今天的研究就到这，以后有空再深入研究</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[solidot页面中的名言]]></title>
    <link href="http://xdbaqiao.github.io/blog/2013/07/14/solidot-about/"/>
    <updated>2013-07-14T18:39:00+08:00</updated>
    <id>http://xdbaqiao.github.io/blog/2013/07/14/solidot-about</id>
    <content type="html"><![CDATA[<p>偶然发现<a href="http://www.solidot.org/">solidot</a>页面有很多名言警句，而且都是很不错的句子，就写了一个脚本，把这些句子提取下来了。</p>

<pre><code>人人生而平等--美国独立宣言
冬天已经到来，春天还会远吗？--雪莱
对他们伟大领袖的无情，是一个民族强大的表现--普鲁塔克
计算机就跟比基尼一样，省去了人们许多的胡思乱想。--萨姆·尤因
我认为低智，偏执，思想贫乏是最大的邪恶。而聪明，达观，多知的人，比之别样的人更堪信任。--王小波
你自己的代码如果超过6个月不看，再看的时候也一样像是别人写--伊格尔森定律
自由的保证是什么?是对自己不再感到羞耻。——尼采
不要向邪恶低头，而是要更勇敢地继续与之对抗。——维吉尔
政府有无限种手段来制造垄断——穆瑞·罗斯巴德
人民不应该怕政府，政府才应该怕人民。
任何人均有其价值
真正的无知不是知识的缺乏，而是拒绝获取知识。——卡尔·波普尔
当某人告诉你：“不是钱，而是原则问题”时，十有八九就是钱的问题——胡巴尔德
手段的不纯洁，必然导致目的的不纯洁。--甘地
不要恐慌--《银河系漫游指南》
谁能最恰当地评价一个人，他的敌人还是他自己？
民主不能从上面给予，而必须从下面争取而来——给予的东西可以收回，但争取来的东西却收不回。——方励之
通往地狱的路，都是由善意铺成的。——哈耶克
大胆的假设，小心的求证；认真的做事，严肃的做人。 --胡适
一切拥有权力的人都有滥用权力为自己谋求私利的倾向；任何专制的国家的教育目的都是在极力降低国民的心智。 --孟德斯鸠
专制制度下只有两种人：一种是哑子，一种是骗子。我看今天的中国就是少数骗子在统治多数哑子。--王亚南
实力永远意味着责任和危险。 -- 罗斯福. T.
你不问我，我就不会说谎话。
我们是微软。反抗是徒劳的。你会被同化的
法律必须被信仰，否则形同虚设。--伯尔曼
异议是爱国的最高形式 --托马斯·杰弗逊
坚信比谎言更是真理的敌人。——尼采
已经集中起来的权力不会由于创造它的那些人的良好愿望而变为无害。--弗里德曼
什么都比不上厄运更能磨练人的德性。——莎士比亚
有两样重要产品出自伯克利：LSD和BSD*。我们不相信这是个巧合。--Jeremy S. Anderson
想了解一个人的个性，那就赋予他权力。--林肯
管得最少，就是最好的政府。-- 大卫·梭罗
所谓现实只不过是一个错觉，虽然这个错觉非常持久。--爱因斯坦
老大哥在看着你。--奥威尔
程序员的问题是你无法预料他在做什么，直到为时已晚--Seymour Cray
国家是为人而建立，而人不是为国家而生存。--爱因斯坦
与其被动地同意别人的看法，不如理智地表示反对，因为如果你信自己的智慧，那么你的异议正表明了更多的赞同。--罗素
硬件:计算机系统中可被踢的部分。--Jeff Pesis
花代价所换来的一点才智，抵过别人传授的数倍不止。
彼窃钩者诛，窃国者为诸侯。——庄子
疑人先自疑，律人先律己
如果你想走到高处，就要使用自己的两条腿！不要让别人把你抬到高处；不要坐在别人的背上和头上。 --尼采·F.W.
自由只有为了自由的缘故才能被限制。——约翰 罗尔斯
通往地狱的路，都是由善意铺成的——哈耶克
柔和回答， 使怒消退。 言语暴戾， 触动怒气——箴言篇 15:1
具有新想法的人在其想法实现之前是个怪人。
自古至今，容忍的总是老百姓，被容忍的总是统治者--殷海光
不管我们已经观察到多少只白天鹅，都不能确立“所有天鹅皆为白色”的理论。只要看见一只黑天鹅就可以驳倒它。——卡尔·波普尔
没有一个人的记性，好到可以作个成功的说谎者——林肯
渴求美德而非奖赏。
哪里没有财产权，哪里就没有正义。--弗里德里克·哈耶克
不管民主的定义是什么，没有新闻自由， 民主本身就无法存在。--希尔斯曼
所谓科学的论辩，从总体上来说则是没有多大效果的，更不用说论辩几乎总是各持己见的这个事实。——弗洛伊德
以眼还眼，世界只会更盲目。--甘地
善待他人，即是最善待自己。
工作撵跑三个魔鬼：无聊、堕落和贫穷。
死会引人哭泣。虽则如此，人生的三分之一却在睡眠中打发掉了。--拜伦
发现可能性的界限的唯一办法就是越过这个界限，到不可能中去。--阿瑟·克拉克
科学必须始于神话，并伴随着对神话的批判。——卡尔·波普尔
财富并非供人拥有，而是供人享受。
所谓自由就是可以说二加二等于四的自由。--奥威尔
640K对每一个人来说都已足够--比尔盖茨
所谓爱国心，是指你既生为这个国家的国民，对于这个国家，当比对其他一切的国家信仰得高贵优越。--萧伯纳
人们还往往把真理和错误混在一起去教人，而坚持的却是错误。--歌德
一个从未犯错的人是因为他不曾尝试新鲜事物。--爱因斯坦
千里之行始于足下，九层之台起于垒土。
计算机没什么用。他们只会告诉你答案。--毕加索
人是天生的政治动物。--亚里士多德
世间最庄严的问题是：我能做什么好事？
如果我们过于爽快地承认失败，就可能使自己发觉不了我们非常接近于正确。——卡尔·波普尔
与魔鬼战斗的人，应当小心自己不要成为魔鬼。当你远远凝视深渊时，深渊也在凝视你。——尼采
自由意味着责任，正因为如此，多数人都惧怕自由。--萧伯纳
我不像你一样是一个机器人，让磁盘把我淹没，除非它们是小甜饼，并且只在嘴里。
人民大多数比我们想象的要蒙昧得多，所以宣传的本质就是坚持简单和重复。--戈培尔
首先他们无视于你，而后是嘲笑你，接着是批斗你，再来就是你的胜利之日。--甘地
要节约用水，尽量和女友一起洗澡--加菲猫
集体主义只不过是暴政的外衣。——莱辛
我讨厌星期一。--加菲猫
一个人知道自己为什么而活，就可以忍受任何一种生活。——尼采
每个人都受两种教育，一种来自别人，另一种更重要的是来自自己。--爱德华·吉本
真理是时间之产物，而不是权威之产物 --弗兰西斯·培根
别向医生和律师提供错误的消息。
评断一个国家的品格，不仅要看它培养了什么样的人民，还要看它的人民选择对什么样的人致敬，对什么样的人追怀。 --约翰·肯尼迪
在所有的禁欲道德里，人把自己的一部分视为神，加以崇拜，因此被迫把其他部分加以恶魔化。——尼采
在认识一切事物之后，人才能认识自己，因为事物仅仅是人的界限。——尼采
如果你点燃了真理的烛光，追求真理的人们就能够发现你。——路德维希·冯·米塞斯
所有小说写的都是真事。怕吓着你们才叫小声说。 --王朔
在b进位制中，以数n起头的数出现的机率为logb(n + 1) − logb(n)--本福特定律
在民主和独裁的斗争中，纸上的宪法敌不过独裁者的刺刀。——林语堂
我向星星许了个愿。我并不是真的相信它，但是反正也是免费的，而且也没有证据证明它不灵。--加菲猫
你在活着的同时，也在学习着，无论如何，你活着。--道格拉斯·亚当斯
会玩的人才会学
没有人足够完美，以至可以未经别人同意就支配别人。--林肯
百善孝为先，论心不论迹，论迹贫家无孝子；万恶淫为首，论迹不论心，论心世上少完人
想在善和恶中作造物主的人，必须首先是个破坏者，并砸烂一切价值。也就是说，最大的恶属于最高的善。不过，后者是创造性的善。--尼采
以术治国，政以贿成，吏治日坏，民生多艰
在这个世界上我只确定一件事。那就是人确定的事情越少越好。--毛姆
任何有可能出错的事将会出错--墨菲定理
罗马帝国灭亡的其中一个主要原因是他们没有0 - 这样他们就没法给自己的C程序指明成功退出的路--Robert Firth
谁控制过去就控制未来，谁控制现在就控制过去。--奥威尔
公安怎样公，猪公、狗公、乌龟公，公心何在？公理何存？每事假公图利禄；公局什么 局，酒局、肉局、大烟局，局内者欢，局外者苦，几时结局得安宁！
我注意过，即便是那些声称一切都是命中注定的而且我们无力改变的人，在过马路之前都会左右看。--史提芬·霍金
就算它工作不正常也别担心。如果一切正常，你早该失业了--Mosher的软件工程定律
读古人的书，一方面要知道古人聪明到怎样，一方面也要知道古人傻到怎样。--胡适
资讯是民主社会的流通货币--杰弗逊
若欲求长寿，生活须行善，因为蠢行和邪恶会把生命缩短。
国家是危险的机器--华盛顿
也许我是错而你是对，但只有我们一起努力，才能更接近真理。——卡尔·波普尔
如果你怀疑自己，那么你的立足点确实不稳固了。
喜爱孤独者，非神即兽。--亚里士多德
爱国主义就是积极地为了微不足道的原因杀人并被杀。——勃特兰·罗素
爱国者的责任就是保护国家不受政府侵犯——托马斯·潘恩
实现明天理想的唯一障碍是今天的疑虑。
太阳绝不为它所做的善事后悔，也从不指望任何报酬。
尊重人不应该胜于尊重真理。--柏拉图
成功的骗子，不必再说谎以求生，因为被骗的人，全成为他的拥护者，我再说什么也是枉然。--莎士比亚
肚子大不可怕，可怕的是肚子里没有好东西。--加菲猫
哪里没有财产权，哪里就没有正义。——哈耶克
战争即和平，自由即奴役，无知即力量。--奥威尔
活了一百年却只能记住30M字节是荒谬的。你知道，这比一张压缩盘还要少。人类境况正在变得日趋退。--Marvin Minsky
工欲善其事，必先利其器。居是邦，事其大夫之贤者，友其士之仁者。
我并不同意你的观点，但是我誓死捍卫你说话的权利——伏尔泰
为眼睛近视者指引道路是很费力的，因为你不能对他说：“看见十哩外的教堂吗?朝这个方向走。——维特根斯坦
想想看吧，已经有一百万只猴子坐在一百万台打字机旁，可Usenet就是比不上莎士比。--Blair Houghton
只有两种编程语言：一种是天天挨骂的，另一种是没人用--Bjarne Stroustrup
每一个帝国在即将建立的时候，都富于朝气，希望和成功的光芒；然而一旦皇帝登基，这一切都会荡然无存，留下的只有象征腐朽和无意义的各种仪式典礼。--《沙丘》
只要有了和平、低税收和宽容的司法当局，一个国家要达到最高富裕水平不需要其它东西。——亚当·斯密
天地不仁，以万物为刍狗；圣人不仁，以百姓为刍狗。 --老子
世界上只有两个东西是无限的，一为宇宙，一为人类的愚蠢，我所不能肯定的乃是前者。 --爱因斯坦
我每天只吃四类食物：早饭、午饭、晚饭和零食。--加菲猫
爱国主义是一种有害的、精神错乱的白痴形式。--萧伯纳
我爱你，与你无关。--歌德
身为一个中国人，最大的痛苦时忍受别人“推己及人”的次数，比世界上任何地方的人都要多。--小波
爱国主义：一堆随时可以被任何野心家所点燃，去照亮他的名字的易燃垃圾。 ——安卜罗斯·皮尔斯
恐惧比利剑更伤人--《冰与火之歌》
明白事理的人使自己适应世界；不明事理的人想使世界适应自己。所以，所有进步都要靠不明事理的人。--萧伯纳
所有动物生来平等，但有些动物比其他动物更平等。--奥威尔
对骄傲的人不要谦逊，对谦逊的人不要骄傲。--托玛斯·杰弗逊
宗教上最深的误解——认为坏人没有宗教。——尼采
一个有政治自由的国家固然不能说就是天堂，一个无政治自由的国家确是地狱了。--蒋廷黻
从前的愚民政策是不许人民受教育，现代愚民政策是只许人民受某一种教育。不受教育的人，因为不识字，上人的当，受教育的人，因为识了字，上印刷品的当。--钱钟书
尊严不值钱，却是我唯一真正拥有的！
把理想运用到真实的事物上，便有了文明。
</code></pre>
]]></content>
  </entry>
  
</feed>
